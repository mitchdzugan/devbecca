{"version":3,"sources":["logo.svg","App.jsx","reportWebVitals.js","index.js"],"names":["basics","split","slice","join","ls","stepping","App","React","useState","started","setStarted","vars","setVars","linenum","fname","_stack","setStack","_stdin","setStdin","stack","map","el","length","console","log","stdin","className","style","display","flexDirection","flex","onClick","href","e","preventDefault","fetch","then","response","json","done","onValueChange","code","highlight","languages","ruby","line","i","value","padding","fontFamily","fontSize","visibility","data","margin","reverse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAAe,I,+DCUTA,E,6IAAiBC,MAAM,MAAMC,MAAM,GAAGC,KAAK,MAC3CC,EAAKJ,EAAOC,MAAM,MAEpBI,GAAW,EAmIAC,MAlIf,WAAgB,IAAD,EACmBC,IAAMC,UAAS,GADlC,mBACJC,EADI,KACKC,EADL,OAEaH,IAAMC,SAAS,IAF5B,mBAEJG,EAFI,KAEEC,EAFF,OAGgBL,IAAMC,SAAS,CAAC,CAAEK,QAAS,EAAGC,MAAO,MAHrD,mBAGJC,EAHI,KAGIC,EAHJ,OAIgBT,IAAMC,SAAS,IAJ/B,mBAIJS,EAJI,KAIIC,EAJJ,KAKLC,EAAQJ,EAAOK,KAAI,SAACC,GAEtB,IADA,IAAIR,EAAUQ,EAAGR,QAAU,EACpBA,EAAU,MAAQT,EAAGS,EAAU,IAAM,IAAIS,OAAS,GACrDT,IAGJ,OADAU,QAAQC,IAAIX,EAASQ,EAAGR,SACjB,CAAEA,UAASC,MAAOO,EAAGP,UAExBD,EAAYM,EAAM,GAAlBN,QA0BFY,EAAQR,EACd,OACI,qBAAKS,UAAU,OAAf,SACE,sBAAKC,MAAO,CACRC,QAAS,OACTC,cAAe,OAFnB,UAIE,qBAAKF,MAAQ,CAAEG,KAAM,KAArB,SACE,sBAAKJ,UAAU,SAAf,UACE,sBAAKA,UAAU,SAAf,UACE,yCACA,qBAAKA,UAAU,WACf,qBAAKA,UAAU,WACf,qBAAKA,UAAU,WACf,qBAAKA,UAAU,WACf,mBAAGK,QAxCH,aAwCmBC,KAAMvB,EAAU,GAAK,KAAxC,mBACA,qBAAKiB,UAAU,WACf,mBAAGK,QAzCJ,SAACE,GACVA,EAAEC,iBACE7B,IACJA,GAAW,EACNI,IACDS,EAAS,IACTN,EAAQ,IACRF,GAAW,IAEfyB,MAAM1B,EAAU,QAAU,UACrB2B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,YAAmC,IAAhCjB,EAA+B,EAA/BA,MAAOR,EAAwB,EAAxBA,KAAMc,EAAkB,EAAlBA,MAAOc,EAAW,EAAXA,KACzBrB,GAAWT,EAAeQ,EAAL,KAAgBQ,GAAS,KACzCc,IACD3B,EAAQD,GACRK,EAASG,IAEToB,IACAvB,EAAS,CAAC,CAAEH,QAAS,EAAGC,MAAO,MAC/BJ,GAAW,IAEfL,GAAW,OAoBS2B,KAAM,GAAxB,kBACA,qBAAKN,UAAU,cAEjB,qBAAKA,UAAU,KAAf,SACE,8BACE,cAAC,IAAD,CACEc,cAAe,SAACC,KAChBC,UAAW,SAAAD,GAAI,OACXC,oBAAUD,EAAME,YAAUC,MACrB3C,MAAM,MACNmB,KAAI,SAACyB,EAAMC,GAAP,0DAC4CA,EAAI,IAAMjC,EAAU,SAAW,GAD3E,aACkFgC,EADlF,cAEH1C,KAAK,OAEf4C,MAAO/C,EACPgD,QAAS,GACTrB,MAAO,CACHsB,WAAY,sCACZC,SAAU,eAOxB,sBAAKvB,MAAQ,CAAEG,KAAM,IAAKF,QAAS,OAAQC,cAAe,UAA1D,UACE,sBAAKH,UAAU,SAAf,UACE,sBAAKA,UAAU,SAAf,UACE,4CACA,qBAAKA,UAAU,WACf,wBAAQC,MAAO,CAAEwB,WAAY,UAA7B,kBAEF,qBAAKzB,UAAU,SAAf,SACE,8BACE,cAAC,IAAD,CAAW0B,KAAMzC,WAIvB,sBAAKe,UAAU,SAAf,UACE,sBAAKA,UAAU,SAAf,UACE,wCACA,qBAAKA,UAAU,WACf,wBAAQC,MAAO,CAAEwB,WAAY,UAA7B,kBAEF,qBAAKzB,UAAU,SAAf,SACIjB,EACE,wBAAOkB,MAAO,CAAE0B,OAAQ,QAAU3B,UAAU,QAA5C,UACE,+BACE,0CACA,gDAEDP,EAAMmC,UAAUlC,KAAI,gBAAGN,EAAH,EAAGA,MAAOD,EAAV,EAAUA,QAAV,OAAwB,+BAAI,6BAAe,KAAVC,EAAe,8CAA4BA,IAAW,6BAAKD,aAN3G,6BAWhB,sBAAKa,UAAU,SAAf,UACE,sBAAKA,UAAU,SAAf,UACE,yCACF,qBAAKA,UAAU,WACf,wBAAQC,MAAO,CAAEwB,WAAY,UAA7B,kBAEF,qBAAKzB,UAAU,SAAf,SACE,8BACGD,kBC1HJ8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.94cf035a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Inspector from 'react-inspector';\nimport Editor from \"react-simple-code-editor\";\nimport { highlight, languages } from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-ruby\";\nimport \"prismjs/themes/prism.css\";\nimport _basics from \"../../basics.rb\";\nconst basics = _basics.split(\"\\n\").slice(4).join(\"\\n\");\nconst ls = basics.split(\"\\n\");\n\nlet stepping = false;\nfunction App() {\n    const [started, setStarted] = React.useState(false);\n    const [vars, setVars] = React.useState({});\n    const [_stack, setStack] = React.useState([{ linenum: 0, fname: \"\" }]);\n    const [_stdin, setStdin] = React.useState(\"\");\n    const stack = _stack.map((el) => {\n        let linenum = el.linenum + 1;\n        while (linenum < 100 && (ls[linenum - 1] || \"\").length < 1) {\n            linenum++;\n        }\n        console.log(linenum, el.linenum);\n        return { linenum, fname: el.fname };\n    });\n    const { linenum } = stack[0];\n    const reset = () => {};\n    const step = (e) => {\n        e.preventDefault();\n        if (stepping) { return; }\n        stepping = true;\n        if (!started) {\n            setStdin(\"\");\n            setVars({});\n            setStarted(true);\n        }\n        fetch(started ? '/step' : '/start')\n            .then(response => response.json())\n            .then(({ stack, vars, stdin, done }) => {\n                setStdin((!started ? \"\" : _stdin) + (stdin || \"\"));\n                if (!done) {\n                    setVars(vars);\n                    setStack(stack);\n                }\n                if (done) {\n                    setStack([{ linenum: 0, fname: \"\" }]);\n                    setStarted(false);\n                }\n                stepping = false;\n            });\n    };\n    const stdin = _stdin;\n    return (\n        <div className=\"page\" >\n          <div style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n          }}>\n            <div style ={{ flex: \"2\" }}>\n              <div className=\"editor\">\n                <div className=\"header\">\n                  <div>Editor</div>\n                  <div className=\"spacer\" />\n                  <div className=\"spacer\" />\n                  <div className=\"spacer\" />\n                  <div className=\"spacer\" />\n                  <a onClick={reset} href={started ? \"\" : null}>Reset</a>\n                  <div className=\"spacer\" />\n                  <a onClick={step} href={\"\"}>Step</a>\n                  <div className=\"spacer\" />\n                </div>\n                <div className=\"ta\">\n                  <div>\n                    <Editor\n                      onValueChange={(code) => {}}\n                      highlight={code =>\n                          highlight(code, languages.ruby)\n                              .split('\\n')\n                              .map((line, i) =>\n                                  `<span class=\"container_editor_line_number ${i + 1 === linenum ? \"hlight\" : \"\"}\">${line}</span>`\n                              ).join('\\n')\n                      }\n                      value={basics}\n                      padding={10}\n                      style={{\n                          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                          fontSize: 12,\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div style ={{ flex: \"1\", display: \"flex\", flexDirection: \"column\" }}>\n              <div className=\"editor\">\n                <div className=\"header\">\n                  <div>Variables</div>\n                  <div className=\"spacer\" />\n                  <button style={{ visibility: \"hidden\" }} >i</button>\n                </div>\n                <div className=\"ta ta2\">\n                  <div>\n                    <Inspector data={vars} />\n                  </div>\n                </div>\n              </div>\n              <div className=\"editor\">\n                <div className=\"header\">\n                  <div>Stack</div>\n                  <div className=\"spacer\" />\n                  <button style={{ visibility: \"hidden\" }} >i</button>\n                </div>\n                <div className=\"ta ta2\">\n                  {!started ? <div/> : (\n                      <table style={{ margin: \"auto\" }} className=\"table\">\n                        <tr>\n                          <th>Function</th>\n                          <th>Line Number</th>\n                        </tr>\n                        {stack.reverse().map(({ fname, linenum }) => <tr><td>{fname === \"\" ? <italic>toplevel</italic> : fname}</td><td>{linenum}</td></tr>)}\n                      </table>\n                  )}\n                </div>\n              </div>\n              <div className=\"editor\">\n                <div className=\"header\">\n                  <div>Output</div>\n                <div className=\"spacer\" />\n                <button style={{ visibility: \"hidden\" }} >i</button>\n              </div>\n              <div className=\"ta ta2\">\n                <div>\n                  {stdin}\n                </div>\n              </div>\n            </div>\n            </div>\n          </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}